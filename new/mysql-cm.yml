apiVersion: v1
kind: ConfigMap
metadata:
  name: my-set-config
data:
  run.sh: |
    #!/bin/sh
    sleep 10 # wait for vars to set
    SET_INDEX=${HOSTNAME##*-}
    echo "Starting initializing for pod $SET_INDEX"
    if [ "$SET_INDEX" = "0" ]; then
      cp /mnt/scripts/my-0.cnf /mnt/data/my.cnf
      cp /mnt/scripts/init-mysql-0.sql /mnt/data/b-init-mysql-cluster.sql
      cp /mnt/scripts/init-test-script.sql /mnt/data/a-init-test-script.sql
      cp /mnt/scripts/prep-work.sh /mnt/data/prep-work.sh
      touch /mnt/data/auto.cnf       
    elif [ "$SET_INDEX" = "1" ]; then
      cp /mnt/scripts/my-1.cnf /mnt/data/my.cnf
      cp /mnt/scripts/init-mysql-1.sql /mnt/data/b-init-mysql-cluster.sql
      cp /mnt/scripts/init-test-script.sql /mnt/data/a-init-test-script.sql
      cp /mnt/scripts/prep-work.sh /mnt/data/prep-work.sh
      touch /mnt/data/auto.cnf
    elif [ "$SET_INDEX" = "2" ]; then
      echo "placeholder to add 3rd mysql member."
    else
      echo "Invalid statefulset index"
      exit 1
    fi
    nc -w 2 -v mysql.default.svc.cluster.local 3306 </dev/null;
    if [[ $? -ne 1 ]]
      then
        echo "####### AUTOMATED CONFIG APPEND START ###############"  >> /mnt/data/my.cnf
        echo "####### RUNNING CLUSTER DETECTED ####################"  >> /mnt/data/my.cnf
        echo "####### HENCE: OMIT BOOTSTRAP CLUSTER ###############"  >> /mnt/data/my.cnf
        echo "loose-group_replication_bootstrap_group = OFF" >> /mnt/data/my.cnf
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/my.cnf
      else
        echo "####### AUTOMATED CONFIG APPEND START ###############"  >> /mnt/data/my.cnf
        echo "####### UNABLE TO DETECT RUNNING CLUSTER ############"  >> /mnt/data/my.cnf
        echo "####### HENCE: BOOTSTRAP CLUSTER ON BOOT ############"  >> /mnt/data/my.cnf
        echo "loose-group_replication_bootstrap_group = ON" >> /mnt/data/my.cnf
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/my.cnf
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/prep-work.sh
        echo "####### UNABLE TO DETECT RUNNING CLUSTER ############"  >> /mnt/data/prep-work.sh
        echo "####### HENCE: BOOTSTRAP CLUSTER ON BOOT ############"  >> /mnt/data/prep-work.sh
        echo "####### WAIT FOR INITIAL CLUSTER TO BOOTUP ##########"  >> /mnt/data/prep-work.sh
        echo "sleep 60"  >> /mnt/data/prep-work.sh
    fi 
  my-0.cnf: |
    # For advice on how to change settings please see
    # http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
    # https://www.digitalocean.com/community/tutorials/how-to-configure-mysql-group-replication-on-ubuntu-16-04#choosing-single-primary-or-multi-primary
    # https://dba.stackexchange.com/questions/287649/mysql-multi-master-group-replication-on-kubernetes
    [mysqld]
    ########################## GROUP REPLICATION CONFIG START #########################################
    gtid_mode = ON
    enforce_gtid_consistency = ON
    master_info_repository = TABLE
    relay_log_info_repository = TABLE
    binlog_checksum = NONE
    log_slave_updates = ON
    log_bin = binlog
    binlog_format = ROW
    transaction_write_set_extraction = XXHASH64
    loose-group_replication_start_on_boot = ON
    loose-group_replication_group_name = "85cbd4a0-7338-46f1-b15e-28c1a26f465e"
    loose-group_replication_ip_whitelist = "mysql-0.mysql.default.svc.cluster.local,mysql-1.mysql.default.svc.cluster.local"
    loose-group_replication_group_seeds = "mysql-0.mysql.default.svc.cluster.local:33061,mysql-1.mysql.default.svc.cluster.local:33061"
    loose-group_replication_single_primary_mode = OFF
    loose-group_replication_enforce_update_everywhere_checks = ON
    server_id = 1
    bind-address = "mysql-0.mysql.default.svc.cluster.local"
    report_host = "mysql-0.mysql.default.svc.cluster.local"
    loose-group_replication_local_address = "mysql-0.mysql.default.svc.cluster.local:33061"
    skip-host-cache
    skip-name-resolve
    datadir=/var/lib/mysql
    socket=/var/lib/mysql/mysql.sock
    secure-file-priv=/var/lib/mysql-files
    user=mysql
    symbolic-links=0
    relay_log=mysql-0-relay-bin
    pid-file=/var/run/mysqld/mysqld.pid
  my-1.cnf: |
    # For advice on how to change settings please see
    # http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
    # https://www.digitalocean.com/community/tutorials/how-to-configure-mysql-group-replication-on-ubuntu-16-04#choosing-single-primary-or-multi-primary
    # https://dba.stackexchange.com/questions/287649/mysql-multi-master-group-replication-on-kubernetes
    [mysqld]
    ########################## GROUP REPLICATION CONFIG START #########################################
    gtid_mode = ON
    enforce_gtid_consistency = ON
    master_info_repository = TABLE
    relay_log_info_repository = TABLE
    binlog_checksum = NONE
    log_slave_updates = ON
    log_bin = binlog
    binlog_format = ROW
    transaction_write_set_extraction = XXHASH64
    loose-group_replication_start_on_boot = ON
    loose-group_replication_group_name = "85cbd4a0-7338-46f1-b15e-28c1a26f465e"
    loose-group_replication_ip_whitelist = "mysql-0.mysql.default.svc.cluster.local,mysql-1.mysql.default.svc.cluster.local"
    loose-group_replication_group_seeds = "mysql-0.mysql.default.svc.cluster.local:33061,mysql-1.mysql.default.svc.cluster.local:33061"
    loose-group_replication_single_primary_mode = OFF
    loose-group_replication_enforce_update_everywhere_checks = ON
    server_id = 2
    bind-address = "mysql-1.mysql.default.svc.cluster.local"
    report_host = "mysql-1.mysql.default.svc.cluster.local"
    loose-group_replication_local_address = "mysql-1.mysql.default.svc.cluster.local:33061"
    skip-host-cache
    skip-name-resolve
    datadir=/var/lib/mysql
    socket=/var/lib/mysql/mysql.sock
    secure-file-priv=/var/lib/mysql-files
    user=mysql
    symbolic-links=0
    relay_log=mysql-1-relay-bin
    pid-file=/var/run/mysqld/mysqld.pid
  prep-work.sh: |
    #!/bin/sh    
    ###### IMPORTANT REMOVE BELOW LINES BEFORE PROD DEPLOYMENTS. ####
    # rm -rf /var/lib/mysql/auto.cnf
    # rm -rf /var/lib/mysql/
  init-mysql-0.sql: |
    ######################### GR CLUSTER CONFIGS START ####################
    SET SQL_LOG_BIN=0;
    CREATE USER 'repl'@'%' IDENTIFIED BY 'repl';
    GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
    FLUSH PRIVILEGES;
    SET SQL_LOG_BIN=1;
    CHANGE MASTER TO MASTER_USER='repl', MASTER_PASSWORD='repl' FOR CHANNEL 'group_replication_recovery';
    INSTALL PLUGIN group_replication SONAME 'group_replication.so';
    ######################### GR CLUSTER CONFIGS END ######################
  init-mysql-1.sql: |
    SET SQL_LOG_BIN=0;
    CREATE USER 'repl'@'%' IDENTIFIED BY 'repl';
    GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
    FLUSH PRIVILEGES;
    SET SQL_LOG_BIN=1;
    CHANGE MASTER TO MASTER_USER='repl', MASTER_PASSWORD='repl' FOR CHANNEL 'group_replication_recovery';
    INSTALL PLUGIN group_replication SONAME 'group_replication.so';
  init-test-script.sql: |
    ########################## TEST SCRIPT START ##########################
    CREATE DATABASE IF NOT EXISTS mirthdb;
    USE mirthdb;
    CREATE TABLE IF NOT EXISTS test (ID int NOT NULL AUTO_INCREMENT, UTS varchar(255), increment varchar(255), PRIMARY KEY (ID)) ENGINE=InnoDB;
    CREATE USER IF NOT EXISTS 'mirth_init_user'@'localhost' IDENTIFIED BY 'aqwzsxedcrfv';
    CREATE USER IF NOT EXISTS 'mirth_init_user'@'%' IDENTIFIED BY 'aqwzsxedcrfv';
    GRANT ALL ON *.* TO 'mirth_init_user'@'localhost';
    GRANT ALL ON *.* TO 'mirth_init_user'@'%';
    FLUSH PRIVILEGES;
    ########################## TEST SCRIPT END ############################
